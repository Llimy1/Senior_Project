로보 플로우를 사용하여 데이터 라벨링 과정을 거쳤습니다.
라벨리은 약 만장을 진행 했고 트레인 데이터 7천장 검증 데이터 1700장 테스트 데이터 1300장으로
데이터 셋을 구성했습니다.
욜로를 사용하여 학습 테스트를 진행을 했습니다.
현재 컴퓨터에 사용 중인 쿠다와 텐서플로우, 라이브러리 버전이 호환 되지 않아
호환 버전을 재설치 한 후 학습을 진행 했습니다.
학습은 하드웨어 사양에 맞게 배치 사이즈와 에포크를 줄여 진행을 하였고
예측 결과 테스트를 이미지로 진행을 하였을 때 예측률이 떨어진다고 판단 되었습니다.
저희가 구성한 데이터 셋을 기반으로 학습을 시킨 로보플로우 모델을 API로 가져와 사용하기로 했습니다.

CCTV 화면을 어떻게 보여주는 것이 좋을까란 생각을 하며 웹 서비스를 만들기로 했습니다.
서버는 패스트api를 사용 했습니다.
fastapi는 현대적이고, 빠르며 가볍게 api 빌드를 하기 위해 좋은 프레임워크여서 선택했습니다.
사용을 위해 패스트api, 유비콘, 파이썬 멀티파트로 로컬 서버를 열 수 있습니다.
데이터 베이스는 sqlit를 사용하여 파일 형식으로 주고 받기 쉽게 만들었고 데이터 관리는 디비버를
사용했습니다.
먼저 데이터 베이스 연결 및 필요 테이블을 생성을 했습니다.
그 후 회원 가입, 로그인 페이지를 구성했습니다.
회원 가입은 sha256을 사용하여 암호화를 하였고 서버로 HTTP POST 요청을 하여 정보 값을 전송 했습니다.
서버에선 데이터를 받아 데이터 베이스에 저장하도록 했습니다.
로그인도 마찬가지로 입력된 정보 값을 POST 요청으로 정보 값을 서버로 전송하였고
서버에서 반환되는 값을 받아 로그인을 하도록 했습니다.
로그인 시 서버에서는 전송된 아이디의 비밀번호를 가져와 일치하는지 확인 한 후
사용자면 200을 관리자면 210을 일치하지 않는다면 401을 반환하도록 설정 했습니다.
사용자 로그인을 성공하면 바로 CCTV 페이지로 넘어가고 관리자면 TRAIN 페이지로 넘어가게 됩니다.

CCTV 페이지에선 ai 모델이 적용된 웹 캠을 보여주도록 구성을 했습니다.
저희가 사용 중인 ai 모델을 사용하려 했지만 gpu 메모리 부족으로
객체 인식 경량화 모델인 coco-ssd를 사용하여 웹 페이지에 ai 모델 적용이 가능한 것을 확인 했습니다.
그리고 저희가 사용 중인 모델을 사용 가능하게 만들기 위하여 이미지를 서버에 전송하여
서버에서 이미지를 받아 예측 결과를 데이터 베이스에 이미지와, 라벨을 저장을 하도록 했습니다.
저장을 한 후 결과 값을 웹 페이지에 반환을 하고 예측 결과 이미지와 라벨링 된 값,
해당 라벨에 맞는 경고음과 함께 반환이 되도록 구성했습니다.

관리자 페이지에서는 데이터 셋 구축을 할 수 있게 기능을 추가 했습니다.
이미지 업로드의 제한을 두지 않고 이미지를 업로드 할 수 있게 하였고
POST요청으로 업로드 버튼을 누르면 이미지를 서버에서 전송 받아 데이터 베이스에 저장을 할 수 있게 했습니다.
이후 train 버튼을 누르게 되면 데이터 베이스에 있는 이미지를 가져와 원본 이미지와 예측 결과 json 파일로
저장되게 하여 데이터 셋을 구축 할 수 있게 하였습니다.